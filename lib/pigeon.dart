// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class AMAppInfo {
  AMAppInfo({
    required this.handle,
    required this.appId,
    required this.name,
    required this.iconData,
    required this.category,
  });

  int handle;

  String appId;

  String name;

  Uint8List iconData;

  String category;

  Object encode() {
    return <Object?>[
      handle,
      appId,
      name,
      iconData,
      category,
    ];
  }

  static AMAppInfo decode(Object result) {
    result as List<Object?>;
    return AMAppInfo(
      handle: result[0]! as int,
      appId: result[1]! as String,
      name: result[2]! as String,
      iconData: result[3]! as Uint8List,
      category: result[4]! as String,
    );
  }
}

class RHMIAppInfo {
  RHMIAppInfo({
    required this.handle,
    required this.appId,
    required this.resources,
  });

  int handle;

  String appId;

  Map<String?, Uint8List?> resources;

  Object encode() {
    return <Object?>[
      handle,
      appId,
      resources,
    ];
  }

  static RHMIAppInfo decode(Object result) {
    result as List<Object?>;
    return RHMIAppInfo(
      handle: result[0]! as int,
      appId: result[1]! as String,
      resources: (result[2] as Map<Object?, Object?>?)!.cast<String?, Uint8List?>(),
    );
  }
}

class ServerApi {
  /// Constructor for [ServerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ServerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<String> getPlatformVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.headunit.ServerApi.getPlatformVersion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> startServer() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.headunit.ServerApi.startServer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> amTrigger(String arg_appId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.headunit.ServerApi.amTrigger', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_appId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _HeadunitApiCodec extends StandardMessageCodec {
  const _HeadunitApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AMAppInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is RHMIAppInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AMAppInfo.decode(readValue(buffer)!);
      case 129: 
        return RHMIAppInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class HeadunitApi {
  static const MessageCodec<Object?> codec = _HeadunitApiCodec();

  void amRegisterApp(AMAppInfo appInfo);

  void amUnregisterApp(String appId);

  void rhmiRegisterApp(RHMIAppInfo appInfo);

  void rhmiUnregisterApp(String appId);

  void rhmiSetData(String appId, int modelId, Object? value);

  void rhmiSetProperty(String appId, int componentId, int propertyId, Object? value);

  void rhmiTriggerEvent(String appId, int eventId, Map<int?, Object?> args);

  static void setup(HeadunitApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.amRegisterApp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.amRegisterApp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final AMAppInfo? arg_appInfo = (args[0] as AMAppInfo?);
          assert(arg_appInfo != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.amRegisterApp was null, expected non-null AMAppInfo.');
          api.amRegisterApp(arg_appInfo!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.amUnregisterApp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.amUnregisterApp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.amUnregisterApp was null, expected non-null String.');
          api.amUnregisterApp(arg_appId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.rhmiRegisterApp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiRegisterApp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RHMIAppInfo? arg_appInfo = (args[0] as RHMIAppInfo?);
          assert(arg_appInfo != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiRegisterApp was null, expected non-null RHMIAppInfo.');
          api.rhmiRegisterApp(arg_appInfo!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.rhmiUnregisterApp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiUnregisterApp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiUnregisterApp was null, expected non-null String.');
          api.rhmiUnregisterApp(arg_appId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetData was null, expected non-null String.');
          final int? arg_modelId = (args[1] as int?);
          assert(arg_modelId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetData was null, expected non-null int.');
          final Object? arg_value = (args[2] as Object?);
          api.rhmiSetData(arg_appId!, arg_modelId!, arg_value);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetProperty', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetProperty was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetProperty was null, expected non-null String.');
          final int? arg_componentId = (args[1] as int?);
          assert(arg_componentId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetProperty was null, expected non-null int.');
          final int? arg_propertyId = (args[2] as int?);
          assert(arg_propertyId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiSetProperty was null, expected non-null int.');
          final Object? arg_value = (args[3] as Object?);
          api.rhmiSetProperty(arg_appId!, arg_componentId!, arg_propertyId!, arg_value);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.headunit.HeadunitApi.rhmiTriggerEvent', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiTriggerEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_appId = (args[0] as String?);
          assert(arg_appId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiTriggerEvent was null, expected non-null String.');
          final int? arg_eventId = (args[1] as int?);
          assert(arg_eventId != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiTriggerEvent was null, expected non-null int.');
          final Map<int?, Object?>? arg_args = (args[2] as Map<Object?, Object?>?)?.cast<int?, Object?>();
          assert(arg_args != null,
              'Argument for dev.flutter.pigeon.headunit.HeadunitApi.rhmiTriggerEvent was null, expected non-null Map<int?, Object?>.');
          api.rhmiTriggerEvent(arg_appId!, arg_eventId!, arg_args!);
          return;
        });
      }
    }
  }
}
